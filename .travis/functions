# travis_.+ functions:
travis_apt_get_update() {
  if ! command -v apt-get &>/dev/null; then
    return
  fi

  local logdest="${TRAVIS_HOME}/apt-get-update.log"
  local opts='-yq'
  if [[ "${1}" == debug ]]; then
    opts=''
    logdest='/dev/stderr'
  fi

  sudo rm -rf "${TRAVIS_ROOT}/var/lib/apt/lists/"*
  sudo apt-get update ${opts} 2>&1 | tee -a "${logdest}" &>/dev/null
}

travis_assert() {
  local result="${1:-${?}}"
  if [[ "${result}" -ne 0 ]]; then
    echo -e "${ANSI_RED}The command \"${TRAVIS_CMD}\" failed and exited with ${result} during ${TRAVIS_STAGE}.${ANSI_RESET}\\n\\nYour build has been stopped."
    travis_terminate 2
  fi
}

travis_bash_qsort_numeric() {
  local pivot i smaller=() larger=()
  travis_bash_qsort_numeric_ret=()
  (($# == 0)) && return 0
  pivot="${1}"
  shift
  for i; do
    if [[ "${i%%_*}" -lt "${pivot%%_*}" ]]; then
      smaller+=("${i}")
    else
      larger+=("${i}")
    fi
  done
  travis_bash_qsort_numeric "${smaller[@]}"
  smaller=("${travis_bash_qsort_numeric_ret[@]}")
  travis_bash_qsort_numeric "${larger[@]}"
  larger=("${travis_bash_qsort_numeric_ret[@]}")
  travis_bash_qsort_numeric_ret=("${smaller[@]}" "${pivot}" "${larger[@]}")
}

travis_cleanup() {
  if [[ -n $SSH_AGENT_PID ]]; then
    kill "$SSH_AGENT_PID" &>/dev/null
  fi
}

travis_cmd() {
  local assert output display retry timing cmd result secure

  cmd="${1}"
  export TRAVIS_CMD="${cmd}"
  shift

  while true; do
    case "${1}" in
    --assert)
      assert=true
      shift
      ;;
    --echo)
      output=true
      shift
      ;;
    --display)
      display="${2}"
      shift 2
      ;;
    --retry)
      retry=true
      shift
      ;;
    --timing)
      timing=true
      shift
      ;;
    --secure)
      secure=" 2>/dev/null"
      shift
      ;;
    *) break ;;
    esac
  done

  if [[ -n "${timing}" ]]; then
    travis_time_start
  fi

  if [[ -n "${output}" ]]; then
    echo "\$ ${display:-${cmd}}"
  fi

  if [[ -n "${retry}" ]]; then
    travis_retry eval "${cmd} ${secure}"
    result="${?}"
  else
    if [[ -n "${secure}" ]]; then
      eval "${cmd} ${secure}" 2>/dev/null
    else
      eval "${cmd} ${secure}"
    fi
    result="${?}"
    if [[ -n "${secure}" && "${result}" -ne 0 ]]; then
      echo -e "${ANSI_RED}The previous command failed, possibly due to a malformed secure environment variable.${ANSI_CLEAR}
${ANSI_RED}Please be sure to escape special characters such as ' ' and '$'.${ANSI_CLEAR}
${ANSI_RED}For more information, see https://docs.travis-ci.com/user/encryption-keys.${ANSI_CLEAR}"
    fi
  fi

  if [[ -n "${timing}" ]]; then
    travis_time_finish
  fi

  if [[ -n "${assert}" ]]; then
    travis_assert "${result}"
  fi

  return "${result}"
}

travis_decrypt() {
  echo "${1}" |
    base64 -d |
    openssl rsautl -decrypt -inkey "${TRAVIS_HOME}/.ssh/id_rsa.repo"
}

decrypt() {
  travis_decrypt "${@}"
}

travis_download() {
  local src="${1}"
  local dst="${2}"

  if curl --version &>/dev/null; then
    curl -fsSL --connect-timeout 5 "${src}" -o "${dst}" 2>/dev/null
    return "${?}"
  fi

  if wget --version &>/dev/null; then
    wget --connect-timeout 5 -q "${src}" -O "${dst}" 2>/dev/null
    return "${?}"
  fi

  return 1
}

travis_find_jdk_path() {
  local vendor version jdkpath result jdk
  jdk="$1"
  vendor="$2"
  version="$3"
  if [[ "$vendor" == "openjdk" ]]; then
    apt_glob="/usr/lib/jvm/java-1.${version}.*openjdk*"
  elif [[ "$vendor" == "oracle" ]]; then
    apt_glob="/usr*/lib/jvm/java-${version}-oracle"
  fi
  shopt -s nullglob
  for jdkpath in /usr*/local/lib/jvm/"$jdk" $apt_glob; do
    [[ ! -d "$jdkpath" ]] && continue
    result="$jdkpath"
    break
  done
  shopt -u nullglob
  echo "$result"
}

travis_fold() {
  local action="${1}"
  local name="${2}"
  echo -en "travis_fold:${action}:${name}\\r${ANSI_CLEAR}"
}

travis_footer() {
  : "${TRAVIS_TEST_RESULT:=86}"
  echo -e "\\nDone. Your build exited with ${TRAVIS_TEST_RESULT}."
  travis_terminate "${TRAVIS_TEST_RESULT}"
}

travis_install_jdk() {
  local url vendor version license jdk certlink
  jdk="$1"
  vendor="$2"
  version="$3"
  if [[ "$vendor" == openjdk ]]; then
    license=GPL
  elif [[ "$vendor" == oracle ]]; then
    license=BCL
  fi
  mkdir -p ~/bin
  url="https://$TRAVIS_APP_HOST/files/install-jdk.sh"
  if ! travis_download "$url" ~/bin/install-jdk.sh; then
    url="https://raw.githubusercontent.com/sormuras/bach/master/install-jdk.sh"
    travis_download "$url" ~/bin/install-jdk.sh || {
      echo "${ANSI_RED}Could not acquire install-jdk.sh. Stopping build.${ANSI_RESET}" >/dev/stderr
      travis_terminate 2
    }
  fi
  chmod +x ~/bin/install-jdk.sh
  travis_cmd "export JAVA_HOME=~/$jdk" --echo
  # shellcheck disable=SC2016
  travis_cmd 'export PATH="$JAVA_HOME/bin:$PATH"' --echo
  [[ "$TRAVIS_OS_NAME" == linux && "$vendor" == openjdk ]] && certlink=" --cacerts"
  # shellcheck disable=2088
  travis_cmd "~/bin/install-jdk.sh --target \"$JAVA_HOME\" --workspace \"$TRAVIS_HOME/.cache/install-jdk\" --feature \"$version\" --license \"$license\"$certlink" --echo --assert
}

travis_internal_ruby() {
  if ! type rvm &>/dev/null; then
    # shellcheck source=/dev/null
    source "${TRAVIS_HOME}/.rvm/scripts/rvm" &>/dev/null
  fi
  local i selected_ruby rubies_array_sorted rubies_array_len
  local rubies_array=()
  while IFS=$'\n' read -r line; do
    rubies_array+=("${line}")
  done < <(
    rvm list strings |
      while read -r v; do
        if [[ ! "${v}" =~ ${TRAVIS_INTERNAL_RUBY_REGEX} ]]; then
          continue
        fi
        v="${v//ruby-/}"
        v="${v%%-*}"
        echo "$(travis_vers2int "${v}")_${v}"
      done
  )
  travis_bash_qsort_numeric "${rubies_array[@]}"
  rubies_array_sorted=("${travis_bash_qsort_numeric_ret[@]}")
  rubies_array_len="${#rubies_array_sorted[@]}"
  if ((rubies_array_len <= 0)); then
    echo 'default'
  else
    i=$((rubies_array_len - 1))
    selected_ruby="${rubies_array_sorted[${i}]}"
    selected_ruby="${selected_ruby##*_}"
    echo "${selected_ruby:-default}"
  fi
}

travis_jigger() {
  local cmd_pid="${1}"
  shift
  local timeout="${1}"
  shift
  local count=0

  echo -e "\\n"

  while [[ "${count}" -lt "${timeout}" ]]; do
    count="$((count + 1))"
    echo -ne "Still running (${count} of ${timeout}): ${*}\\r"
    sleep 60
  done

  echo -e "\\n${ANSI_RED}Timeout (${timeout} minutes) reached. Terminating \"${*}\"${ANSI_RESET}\\n"
  kill -9 "${cmd_pid}"
}

travis_jinfo_file() {
  local vendor version
  vendor="$1"
  version="$2"
  if [[ "$vendor" == oracle ]]; then
    echo ".java-${version}-${vendor}.jinfo"
  elif [[ "$vendor" == openjdk ]]; then
    echo ".java-1.${version}.*-${vendor}-*.jinfo"
  fi
}

travis_nanoseconds() {
  local cmd='date'
  local format='+%s%N'

  if hash gdate >/dev/null 2>&1; then
    cmd='gdate'
  elif [[ "${TRAVIS_OS_NAME}" == osx ]]; then
    format='+%s000000000'
  fi

  "${cmd}" -u "${format}"
}

travis_remove_from_path() {
  local target="$1"
  PATH="$(echo "$PATH" |
    sed -e "s,\\(:\\|^\\)$target\\(:\\|$\\),:,g" \
      -e 's/::\+/:/g' \
      -e 's/:$//' \
      -e 's/^://')"
}

travis_result() {
  local result="${1}"
  export TRAVIS_TEST_RESULT=$((${TRAVIS_TEST_RESULT:-0} | $((result != 0))))

  if [[ "${result}" -eq 0 ]]; then
    echo -e "${ANSI_GREEN}The command \"${TRAVIS_CMD}\" exited with ${result}.${ANSI_RESET}\\n"
  else
    echo -e "${ANSI_RED}The command \"${TRAVIS_CMD}\" exited with ${result}.${ANSI_RESET}\\n"
  fi
}

travis_retry() {
  local result=0
  local count=1
  while [[ "${count}" -le 3 ]]; do
    [[ "${result}" -ne 0 ]] && {
      echo -e "\\n${ANSI_RED}The command \"${*}\" failed. Retrying, ${count} of 3.${ANSI_RESET}\\n" >&2
    }
    "${@}" && { result=0 && break; } || result="${?}"
    count="$((count + 1))"
    sleep 1
  done

  [[ "${count}" -gt 3 ]] && {
    echo -e "\\n${ANSI_RED}The command \"${*}\" failed 3 times.${ANSI_RESET}\\n" >&2
  }

  return "${result}"
}

# shellcheck disable=SC1117

travis_setup_env() {
  export ANSI_RED="\033[31;1m"
  export ANSI_GREEN="\033[32;1m"
  export ANSI_YELLOW="\033[33;1m"
  export ANSI_RESET="\033[0m"
  export ANSI_CLEAR="\033[0K"

  export DEBIAN_FRONTEND=noninteractive

  if [ "${TERM}" = dumb ]; then
    unset TERM
  fi
  : "${SHELL:=/bin/bash}"
  : "${TERM:=xterm}"
  : "${USER:=travis}"
  export SHELL
  export TERM
  export USER

  case $(uname | tr '[:upper:]' '[:lower:]') in
  linux*)
    export TRAVIS_OS_NAME=linux
    ;;
  darwin*)
    export TRAVIS_OS_NAME=osx
    ;;
  msys*)
    export TRAVIS_OS_NAME=windows
    ;;
  *)
    export TRAVIS_OS_NAME=notset
    ;;
  esac

  export TRAVIS_DIST=notset
  export TRAVIS_INIT=notset
  TRAVIS_ARCH="$(uname -m)"
  if [[ "${TRAVIS_ARCH}" == x86_64 ]]; then
    TRAVIS_ARCH='amd64'
  fi
  export TRAVIS_ARCH

  if [[ "${TRAVIS_OS_NAME}" == linux ]]; then
    TRAVIS_DIST="$(lsb_release -sc 2>/dev/null || echo notset)"
    export TRAVIS_DIST
    if command -v systemctl >/dev/null 2>&1; then
      export TRAVIS_INIT=systemd
    else
      export TRAVIS_INIT=upstart
    fi
  fi

  export TRAVIS_TEST_RESULT=
  export TRAVIS_CMD=

  TRAVIS_TMPDIR="$(mktemp -d 2>/dev/null || mktemp -d -t 'travis_tmp')"
  mkdir -p "${TRAVIS_TMPDIR}"
  export TRAVIS_TMPDIR

  TRAVIS_INFRA=unknown
  if [[ "${TRAVIS_ENABLE_INFRA_DETECTION}" == true ]]; then
    TRAVIS_INFRA="$(travis_whereami | awk -F= '/^infra/ { print $2 }')"
  fi
  export TRAVIS_INFRA

  if command -v pgrep &>/dev/null; then
    pgrep -u "${USER}" 2>/dev/null |
      grep -v -w "${$}" >"${TRAVIS_TMPDIR}/pids_before" || true
  fi
}

travis_setup_java() {
  local jdkpath jdk vendor version
  jdk="$1"
  vendor="$2"
  version="$3"
  jdkpath="$(travis_find_jdk_path "$jdk" "$vendor" "$version")"
  if [[ -z "$jdkpath" ]]; then
    if [[ "$TRAVIS_OS_NAME" == osx ]]; then
      java -version 2>&1 | awk -v vendor="$vendor" -v version="$version" -F'"' '
        BEGIN {
          v = "openjdk"
          if(version<9) { version = "1\\."version }
          version = "^"version"\\."
        }
        /HotSpot/ { v = "oracle" }
        /version/ { if ($2 !~ version) e++ }
        END {
          if (vendor !=v ) e++
          exit e
        }
      ' &&
        return
    fi
    travis_install_jdk "$jdk" "$vendor" "$version"
  elif compgen -G "${jdkpath%/*}/$(travis_jinfo_file "$vendor" "$version")" &>/dev/null &&
    declare -f jdk_switcher &>/dev/null; then
    travis_cmd "jdk_switcher use \"$jdk\"" --echo --assert
    if [[ -f ~/.bash_profile.d/travis_jdk.bash ]]; then
      sed -i '/export \(PATH\|JAVA_HOME\)=/d' ~/.bash_profile.d/travis_jdk.bash
    fi
  else
    export JAVA_HOME="$jdkpath"
    export PATH="$JAVA_HOME/bin:$PATH"
    if [[ -f ~/.bash_profile.d/travis_jdk.bash ]]; then
      sed -i ",export JAVA_HOME=,s,=.\\+,=\"$JAVA_HOME\"," ~/.bash_profile.d/travis_jdk.bash
    fi
  fi
}

travis_temporary_hacks() {
  if [[ ! "${TRAVIS_OS_NAME}" ]]; then
    return
  fi

  "_travis_temporary_hacks_${TRAVIS_OS_NAME}" &>/dev/null || true
}

_travis_temporary_hacks_linux() {
  for troublesome_source in \
    rabbitmq-source.list \
    travis_ci_zeromq3.list \
    neo4j.list; do
    sudo rm -f "${TRAVIS_ROOT}/etc/apt/sources.list.d/${troublesome_source}"
  done
}

travis_terminate() {
  if [[ ! "${TRAVIS_OS_NAME}" ]]; then
    return
  fi

  "_travis_terminate_${TRAVIS_OS_NAME}" "${@}"
}

_travis_terminate_linux() {
  _travis_terminate_unix "${@}"
}

_travis_terminate_osx() {
  _travis_terminate_unix "${@}"
}

_travis_terminate_unix() {
  set +e
  [[ "${TRAVIS_FILTERED}" == redirect_io && -e /dev/fd/9 ]] &&
    sync &&
    command exec 1>&9 2>&9 9>&- &&
    sync
  pgrep -u "${USER}" | grep -v -w "${$}" >"${TRAVIS_TMPDIR}/pids_after"
  awk 'NR==FNR{a[$1]++;next};!($1 in a)' "${TRAVIS_TMPDIR}"/pids_{before,after} |
    xargs kill &>/dev/null || true
  pkill -9 -P "${$}" &>/dev/null || true
  exit "${1}"
}

_travis_terminate_windows() {
  # TODO: find all child processes and exit via ... powershell?
  exit "${1}"
}

travis_time_finish() {
  local result="${?}"
  local travis_timer_end_time
  travis_timer_end_time="$(travis_nanoseconds)"
  local duration
  duration="$((travis_timer_end_time - TRAVIS_TIMER_START_TIME))"
  echo -en "travis_time:end:${TRAVIS_TIMER_ID}:start=${TRAVIS_TIMER_START_TIME},finish=${travis_timer_end_time},duration=${duration}\\r${ANSI_CLEAR}"
  return "${result}"
}

travis_time_start() {
  TRAVIS_TIMER_ID="$(printf %08x $((RANDOM * RANDOM)))"
  TRAVIS_TIMER_START_TIME="$(travis_nanoseconds)"
  export TRAVIS_TIMER_ID TRAVIS_TIMER_START_TIME
  echo -en "travis_time:start:$TRAVIS_TIMER_ID\\r${ANSI_CLEAR}"
}

travis_trace_span() {
  local result="${?}"
  local template="${1}"
  local timestamp
  timestamp="$(travis_nanoseconds)"
  template="${template/__TRAVIS_TIMESTAMP__/${timestamp}}"
  template="${template/__TRAVIS_STATUS__/${result}}"
  echo "${template}" >>/tmp/build.trace
  return "${result}"
}

travis_vers2int() {
  local args
  read -r -a args <<<"$(echo "${1}" | grep --only '^[0-9\.][0-9\.]*' | tr '.' ' ')"
  printf '1%03d%03d%03d%03d' "${args[@]}"
}

travis_wait() {
  local timeout="${1}"

  if [[ "${timeout}" =~ ^[0-9]+$ ]]; then
    shift
  else
    timeout=20
  fi

  local cmd=("${@}")
  local log_file="travis_wait_${$}.log"

  "${cmd[@]}" &>"${log_file}" &
  local cmd_pid="${!}"

  travis_jigger "${!}" "${timeout}" "${cmd[@]}" &
  local jigger_pid="${!}"
  local result

  {
    wait "${cmd_pid}" 2>/dev/null
    result="${?}"
    ps -p"${jigger_pid}" &>/dev/null && kill "${jigger_pid}"
  }

  if [[ "${result}" -eq 0 ]]; then
    echo -e "\\n${ANSI_GREEN}The command ${cmd[*]} exited with ${result}.${ANSI_RESET}"
  else
    echo -e "\\n${ANSI_RED}The command ${cmd[*]} exited with ${result}.${ANSI_RESET}"
  fi

  echo -e "\\n${ANSI_GREEN}Log:${ANSI_RESET}\\n"
  cat "${log_file}"

  return "${result}"
}

travis_whereami() {
  curl -sSL -H 'Accept: text/plain' \
    "${TRAVIS_WHEREAMI_URL:-https://whereami.travis-ci.com}"
}

